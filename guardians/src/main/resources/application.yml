spring:
  application:
    name: guardians

  config:
    import: vault://

  cloud:
    vault:
      uri: ${VAULT_URI}
      authentication: approle
      app-role:
        role-id: ${VAULT_ROLE_ID}
        secret-id: ${VAULT_SECRET_ID}
      kv:
        enabled: true
        backend: guardians
        default-context: guardians
        profile-separator: '/'
      fail-fast: true
      config:
        lifecycle:
          enabled: true

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 30     # 최대 커넥션 수
      minimum-idle: 5           # 최소 유휴 커넥션 수
      idle-timeout: 30000       # 유휴 커넥션 유지 시간 (ms)
      connection-timeout: 5000  # 커넥션 얻기까지 대기 최대 시간 (ms)
      max-lifetime: 1800000     # 커넥션 최대 생명 주기 (ms)

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    open-in-view: false

  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Asia/Seoul

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

  session:
    store-type: redis
    timeout: 1800s
    cookie:
      name : JSESSIONID
      same-site: none
      secure: ${COOKIE_SESSION}

  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

  task:
    execution:
      pool:
        core-size: 10
        max-size: 50
        queue-capacity: 100
        keep-alive: 60s

cloud:
  aws:
    s3:
      bucket: guardians-bucket-name
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    stack:
      auto: false

aws:
  s3:
    access-key: ${AWS_ACCESS_KEY}
    secret-key: ${AWS_SECRET_KEY}
    region: ${AWS_REGION}
    bucket: ${AWS_S3_BUCKET}
    default-profile-url: ${DEFAULT_PROFILE_URL}

springdoc:
  swagger-ui:
    path: /swagger-ui.html

logging:
  level:
    org.springframework.vault: DEBUG
    org.springframework.boot.context.config: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: prometheus
  endpoint:
    prometheus:
      enabled: true

server:
  tomcat:
    threads:
      max: 200
      min-spare: 10